#version 430

out vec4 FragColor;
in 	vec3 glPosition;

const float EPSILON = 0.0005;
const float BIG = 1.0 / 0.0;
	
const int MATERIAL_DIFFUSE 	  = 1;
const int MATERIAL_REFLECTION = 2;
const int MATERIAL_REFRACTION = 3;

const int DIFFUSE_REFLECTION = 1;
const int MIRROR_REFLECTION  = 2;

const int SPHERES_COUNT   = 3;
const int TRIANGLES_COUNT = 25;
const int MATERIAL_COUNT  = 7;

const int CUBE_COUNT = 10;
const int CUBE_TRIANGLES_COUNT = 12;
const int CUBE_TOTAL_TRIANGLES_COUNT = CUBE_COUNT * CUBE_TRIANGLES_COUNT;

const vec3 COLOR_RED    = vec3(1.0, 0.0, 0.0);
const vec3 COLOR_GREEN  = vec3(0.0, 1.0, 0.0);
const vec3 COLOR_YELLOW = vec3(1.0, 1.0, 0.0);
const vec3 COLOR_BLUE   = vec3(0.0, 0.0, 1.0);
const vec3 COLOR_WHITE  = vec3(1.0, 1.0, 1.0);

const vec3 Unit 		= vec3(1.0, 1.0, 1.0);

const int STACK_LENGTH = 10;



int StackPTR = -1;

struct SSphere { 
	vec3  Center;
	float Radius;
	
	int   MaterialIdx;
};

struct STriangle {
	vec3 v1;
	vec3 v2;
	vec3 v3;
	
	int  MaterialIdx;
};

struct Cam {
	vec3 Position;
	vec3 View;
	vec3 Up;
	vec3 Side;
	vec2 Scale;
};

struct Ray {
	vec3 Origin;
	vec3 Direction;
};

struct SIntersection {
	float Time;
	vec3  Point;
	vec3  Normal;
	vec3  Color;
	vec4  LightCoeffs;
	
	float ReflectionCoef;
	float RefractionCoef;
	
	int   MaterialType;
};

struct SMaterial { 
	vec3  Color;
	vec4  LightCoeffs;
	
	float ReflectionCoef;
	float RefractionCoef;
	
	int   MaterialType;
};

struct SLight {
	vec3 Position;
};

struct STracingRay {
	Ray   ray;
	float contribution;
	
	int   depth;
};

SLight 	  	light;
STriangle 	triangles [TRIANGLES_COUNT];
SSphere   	spheres	  [SPHERES_COUNT];
SMaterial 	materials [MATERIAL_COUNT];
STracingRay Stack	  [STACK_LENGTH];

uniform vec3  LIGHT_POSITION;
uniform Cam   uCamera;

uniform STriangle CubeTriangles[CUBE_TOTAL_TRIANGLES_COUNT];
uniform int RayTracingDepth;
uniform int CubeLoadedCount;

Ray GenerateRay() {
	vec2 crd = glPosition.xy * uCamera.Scale;
	vec3 dir = uCamera.View + uCamera.Side * crd.x + uCamera.Up * crd.y;
	
	return Ray(uCamera.Position, normalize(dir));
}

bool pushRay (STracingRay newray) {
	bool canBePlaced = (StackPTR < STACK_LENGTH);
	
	if(canBePlaced) {
		StackPTR += 1;
		Stack[StackPTR] = newray;
	}
	
	return canBePlaced;
} 

STracingRay popRay () {
	StackPTR -= int(StackPTR >= 0);
	return Stack[StackPTR + 1];
}

bool isEmpty() {
	return !(StackPTR >= 0);
}


void initializeDefaultLightMaterials(out SLight light, out SMaterial materials[MATERIAL_COUNT]) {

	light.Position = LIGHT_POSITION;

	vec4 lightCoefs = vec4(0.4, 0.9, 0.0, 512.0);
	
	materials[0].Color 		 	= COLOR_RED;
	materials[0].LightCoeffs 	= lightCoefs;
	materials[0].ReflectionCoef = 0.5;
	materials[0].RefractionCoef = 1.0;
	materials[0].MaterialType 	= MATERIAL_DIFFUSE;
	
	materials[1].Color 			= COLOR_GREEN;
	materials[1].LightCoeffs 	= lightCoefs;
	materials[1].ReflectionCoef = 0.5;
	materials[1].RefractionCoef = 1.0;
	materials[1].MaterialType 	= MATERIAL_DIFFUSE;
	
	materials[2].Color 			= COLOR_BLUE;
	materials[2].LightCoeffs 	= lightCoefs;
	materials[2].ReflectionCoef = 0.5;
	materials[2].RefractionCoef = 1.0;
	materials[2].MaterialType 	= MATERIAL_DIFFUSE;
	
	materials[3].Color 			= COLOR_YELLOW;
	materials[3].LightCoeffs 	= lightCoefs;
	materials[3].ReflectionCoef = 0.5;
	materials[3].RefractionCoef = 1.0;
	materials[3].MaterialType 	= MATERIAL_DIFFUSE;
	
	materials[4].Color 			= COLOR_WHITE;
	materials[4].LightCoeffs 	= lightCoefs;
	materials[4].ReflectionCoef = 0.5;
	materials[4].RefractionCoef = 1.0;
	materials[4].MaterialType 	= MATERIAL_DIFFUSE;
	
	
	materials[5].Color 			= COLOR_WHITE;
	materials[5].LightCoeffs 	= lightCoefs;
	materials[5].ReflectionCoef = 1.0;
	materials[5].RefractionCoef = 0.5;
	materials[5].MaterialType 	= MATERIAL_REFLECTION;

	materials[6].Color           = vec3(0.5, 0.8, 1.0); 
	materials[6].LightCoeffs     = vec4(0.4, 0.9, 0.0, 512.0);
	materials[6].ReflectionCoef  = 0.5;
	materials[6].RefractionCoef  = 1.0;
	materials[6].MaterialType    = MATERIAL_DIFFUSE;
}

void initializeDefaultScene( out STriangle triangles[TRIANGLES_COUNT], out SSphere spheres[SPHERES_COUNT] ) {
   float radius = 7.0; 
    vec3 pentagon[5];
    for(int i = 0; i < 5; i++) {
        float angle = 2.0 * 3.1415926 * float(i) / 5.0;
        pentagon[i] = vec3(radius * cos(angle), radius * sin(angle), 0.0);
    }

    
    for(int i = 0; i < 5; i++) {
        int next_i = (i + 1) % 5;
        
        
        triangles[3*i].v1 = pentagon[i];
        triangles[3*i].v2 = pentagon[next_i];
        triangles[3*i].v3 = pentagon[i] + vec3(0,0,-10);
        triangles[3*i].MaterialIdx = i % 2; 
        
        
        triangles[3*i+1].v1 = pentagon[next_i];
        triangles[3*i+1].v2 = pentagon[next_i] + vec3(0,0,-10);
        triangles[3*i+1].v3 = pentagon[i] + vec3(0,0,-10);
        triangles[3*i+1].MaterialIdx = i % 2;
        
        
        triangles[3*i+2].v1 = pentagon[i];
        triangles[3*i+2].v2 = pentagon[next_i];
        triangles[3*i+2].v3 = vec3(0,0,-5);
        triangles[3*i+2].MaterialIdx = 4;
    }

    
    for (int i = 15; i < TRIANGLES_COUNT; i++) {
        triangles[i].v1 = vec3(0);
        triangles[i].v2 = vec3(0);
        triangles[i].v3 = vec3(0);
        triangles[i].MaterialIdx = 0;
    }

    
    spheres[0].Center = vec3(0.0, 0.0, -5.0);
    spheres[0].Radius = 2.0;
    spheres[0].MaterialIdx = 5;
    
    spheres[1].Center = vec3(2.0, 1.0, -6.0);
    spheres[1].Radius = 1.0;
    spheres[1].MaterialIdx = 5;
    
    spheres[2].Center = LIGHT_POSITION;
    spheres[2].Radius = .1;
    spheres[2].MaterialIdx = 4;
}



bool IntersectSphere( SSphere sphere, Ray ray, float start, float final, out float time ) {
	ray.Origin -= sphere.Center;
	
	float A = dot(ray.Direction, ray.Direction);
	float B = dot(ray.Direction, ray.Origin);
	float C = dot(ray.Origin, ray.Origin) - sphere.Radius * sphere.Radius;
	float D = B * B - A * C;
	
	if (D >= 0.0) {
		D = sqrt(D);
		
		float t1 = (-B - D) / A;
		float t2 = (-B + D) / A;
		
		if(t1 >= 0 || t2 >= 0) {
			if(min(t1, t2) < 0) {
				time = max(t1, t2);
			}
			else {
				time = min(t1, t2);
			}
			
			return true;
		}
	}
	
	return false;
}

bool IntersectTriangle(Ray ray, vec3 v1, vec3 v2, vec3 v3, out float time) {
	time = -1;
	
	vec3 N = cross(v2 - v1, v3 - v1);
	
	float NdotRayDirection = dot(N, ray.Direction);
	
	if (abs(NdotRayDirection) < EPSILON) {
		return false;
	}
	
	float t = -(dot(N, ray.Origin) - dot(N, v1)) / NdotRayDirection;
	
	if (t < 0.0) {
		return false;
	}
	
	vec3 P = ray.Origin + t * ray.Direction;
	vec3 C;
	
	C = cross(v2 - v1, P - v1);
	if (dot(N, C) < 0.0) {
		return false;
	}
	
	C = cross(v3 - v2, P - v2);
	if (dot(N, C) < 0.0) {
		return false;
	}
	
	C = cross(v1 - v3, P - v3);
	if (dot(N, C) < 0.0) {
		return false;
	}
	
	time = t;
	return true;
}

bool Raytrace(Ray ray, float start, float final, inout SIntersection intersect ) {
	bool  result = false;
	float test   = start;
	
	int		  MaterialIdx;
	STriangle triangle;
	SSphere	  sphere;
	
	intersect.Time = final;
	
	for (int i = 0; i < SPHERES_COUNT; i++) {
		sphere 		= spheres[i];
		MaterialIdx = sphere.MaterialIdx;
		
		if (IntersectSphere(sphere, ray, start, final, test) && test < intersect.Time) {
			intersect.Time 	 = test;
			intersect.Point  = ray.Origin + ray.Direction * test;
			intersect.Normal = normalize(intersect.Point - spheres[i].Center);
			
			intersect.Color  		 = materials[MaterialIdx].Color;
			intersect.LightCoeffs 	 = materials[MaterialIdx].LightCoeffs;
			intersect.ReflectionCoef = materials[MaterialIdx].ReflectionCoef;
			intersect.RefractionCoef = materials[MaterialIdx].RefractionCoef;
			intersect.MaterialType	 = materials[MaterialIdx].MaterialType;
			
			result = true;
		}
	}
	
	for (int i = 0; i < TRIANGLES_COUNT; i++) {
		triangle 	= triangles[i];
		MaterialIdx = triangle.MaterialIdx;
		
		if (IntersectTriangle(ray, triangle.v1, triangle.v2, triangle.v3, test) && test < intersect.Time ) {
			intersect.Time   = test;
			intersect.Point  = ray.Origin + ray.Direction * test;
			intersect.Normal = normalize(cross(triangle.v1 - triangle.v2, triangle.v3 - triangle.v2));
			
			intersect.Color  		 = materials[MaterialIdx].Color;
			intersect.LightCoeffs    = materials[MaterialIdx].LightCoeffs;
			intersect.ReflectionCoef = materials[MaterialIdx].ReflectionCoef;
			intersect.RefractionCoef = materials[MaterialIdx].RefractionCoef;
			intersect.MaterialType	 = materials[MaterialIdx].MaterialType;
			
			result = true;
		}
	}
	
	const int CUBE_CURRENT_TOTAL_TRIANGLES_COUNT = min(CUBE_TOTAL_TRIANGLES_COUNT, CubeLoadedCount * CUBE_TRIANGLES_COUNT);
	for (int i = 0; i < CUBE_CURRENT_TOTAL_TRIANGLES_COUNT; i++) {
		triangle 	= CubeTriangles[i];
		MaterialIdx = triangle.MaterialIdx;
		
		if (IntersectTriangle(ray, triangle.v1, triangle.v2, triangle.v3, test) && test < intersect.Time ) {
			intersect.Time   = test;
			intersect.Point  = ray.Origin + ray.Direction * test;
			intersect.Normal = normalize(cross(triangle.v1 - triangle.v2, triangle.v3 - triangle.v2));
			
			intersect.Color  		 = materials[MaterialIdx].Color;
			intersect.LightCoeffs    = materials[MaterialIdx].LightCoeffs;
			intersect.ReflectionCoef = materials[MaterialIdx].ReflectionCoef;
			intersect.RefractionCoef = materials[MaterialIdx].RefractionCoef;
			intersect.MaterialType	 = materials[MaterialIdx].MaterialType;
			
			result = true;
		}
	}
		
	return result;
}

float Shadow(SLight currLight, SIntersection intersect) {
    vec3 lightDir = currLight.Position - intersect.Point;
    float lightDist = length(lightDir);
    lightDir = normalize(lightDir);
    
    Ray shadowRay;
    shadowRay.Origin = intersect.Point + intersect.Normal * EPSILON;
    shadowRay.Direction = lightDir;
    
    SIntersection shadowIntersect;
    shadowIntersect.Time = BIG;
    
    if (Raytrace(shadowRay, EPSILON * 10.0, lightDist, shadowIntersect)) {
    // Игнорируем пересечение с источником света (маленькой сферой)
    if (length(shadowIntersect.Point - currLight.Position) > 0.2) {
        return 0.0; // В тени
    }
}

    return 1.0; // Не в тени
}

vec3 Phong(SIntersection intersect, SLight currLight, float shadow) {
    vec3 lightDir = normalize(currLight.Position - intersect.Point);
    vec3 viewDir = normalize(uCamera.Position - intersect.Point);
    vec3 reflectDir = reflect(-lightDir, intersect.Normal);
    
    // Диффузная составляющая
    float diff = max(dot(intersect.Normal, lightDir), 0.0);
    vec3 diffuse = intersect.LightCoeffs.y * diff * intersect.Color;
    
    // Зеркальная составляющая
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), intersect.LightCoeffs.w);
    vec3 specular = intersect.LightCoeffs.z * spec * Unit;
    
    // Комбинируем с учетом тени
    return intersect.LightCoeffs.x * intersect.Color + 
           shadow * (diffuse + specular);
}

void main ( void ) {
	float start = 0;
	float final = BIG;
	vec3  resultColor = vec3(0,0,0);
	
	//uCamera = InitCameraDefaults();
	Ray ray = GenerateRay();
	
	initializeDefaultScene(triangles, spheres);
	initializeDefaultLightMaterials(light, materials);
	
	 STracingRay primaryRay;
    primaryRay.ray = ray;
    primaryRay.contribution = 1.0;
    primaryRay.depth = 0;
    
    pushRay(primaryRay);
    
   
    float ambient = 0.1; // Ambient освещение
    
    while (!isEmpty()) {
        STracingRay tracingRay = popRay();
        SIntersection intersect;
        intersect.Time = BIG;
        
        if (Raytrace(tracingRay.ray, 0.0, BIG, intersect)) {
            switch (intersect.MaterialType) {
                case MATERIAL_DIFFUSE: {
                    float shadow = Shadow(light, intersect);
                    resultColor += tracingRay.contribution * 
                                  (Phong(intersect, light, shadow) + 
                                   ambient * intersect.Color);
                    break;
                }
                case MATERIAL_REFLECTION: {
                    // Диффузная составляющая
                    if (intersect.ReflectionCoef < 1.0) {
                        float shadow = Shadow(light, intersect);
                        resultColor += tracingRay.contribution * 
                                      (1.0 - intersect.ReflectionCoef) * 
                                      Phong(intersect, light, shadow);
                    }
                    
                    // Отраженная составляющая
                    if (tracingRay.depth < RayTracingDepth) {
                        vec3 reflectDir = reflect(tracingRay.ray.Direction, intersect.Normal);
                        STracingRay reflectedRay;
                        reflectedRay.ray.Origin = intersect.Point + intersect.Normal * EPSILON;
                        reflectedRay.ray.Direction = reflectDir;
                        reflectedRay.contribution = tracingRay.contribution * intersect.ReflectionCoef;
                        reflectedRay.depth = tracingRay.depth + 1;
                        pushRay(reflectedRay);
                    }
                    break;
                }
            }
        } else {
            // Фон, если луч ничего не пересек
            resultColor += tracingRay.contribution * vec3(0.2);
        }
    }
    
    FragColor = vec4(resultColor, 1.0);
}